service: fuzzy
frameworkVersion: '>=1.28.0 <2.0.0'

custom:
  bucket-store-opts: 
    dev: 'fuzzy-bucket-dev'
    prod: 'fuzzy-bucket-prod'
  bucket-store: ${self:custom.bucket-store-opts.${opt:stage, self:provider.stage}}
  stage: ${opt:stage, self:provider.stage}


provider:
  name: aws
  stage: dev
  runtime: go1.x
  region: us-west-1
  environment:
    AWSBUCKET: ${self:custom.bucket-store}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:custom.bucket-store}/*"

resources:
  Resources:
    S3BucketConfiguration:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket-store}

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  terms:
    handler: bin/terms
    events:
      - http:
          path: terms
          method: get
          # authorizer: # An AWS API Gateway custom authorizer function
            # name: authorizerFunc # The name of the authorizer function (must be in this service)
            # arn: xxx:xxx:Lambda-Name # Can be used instead of name to reference a function outside of service
            # resultTtlInSeconds: 0
            # identitySource: method.request.header.Authorization
            # identityValidationExpression: someRegex
            # type: token #
      - http:
          path: terms
          method: post
          request:
            schema:
              application/json: ${file(schemas/terms_post.json)}
      - http:
          path: terms
          method: put
          request:
            schema:
              application/json: ${file(schemas/terms_put.json)}
  match:
    handler: bin/match
    events:
      - http:
          path: match
          method: get
          request:
            parameters:
              querystrings:
                q: true